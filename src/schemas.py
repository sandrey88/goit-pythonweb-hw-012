from pydantic import BaseModel, EmailStr, Field
from datetime import date, datetime
from typing import Optional

class UserBase(BaseModel):
    """
    Base Pydantic schema for user models.

    Attributes:
        email (EmailStr): User's email address.
    """
    email: EmailStr

class UserCreate(UserBase):
    """
    Schema for creating a new user.

    Attributes:
        password (str): User's password.
    """
    password: str
    # verification_token is generated by backend, not provided by client

class UserRead(UserBase):
    """
    Schema for reading user data.

    Attributes:
        id (int): User ID.
        is_verified (bool): Whether the user's email is verified.
        verification_token (Optional[str]): Email verification token.
        avatar_url (Optional[str]): URL to the user's avatar.
        created_at (Optional[datetime]): Account creation timestamp.
    """
    id: int
    is_verified: bool
    verification_token: Optional[str] = None
    avatar_url: Optional[str] = None
    created_at: Optional[datetime] = None

    class Config:
        from_attributes = True

class UserLogin(UserBase):
    """
    Schema for user login.

    Attributes:
        password (str): User's password.
    """
    password: str

class UserUpdate(BaseModel):
    """
    Schema for updating user information.

    Attributes:
        password (Optional[str]): New password.
        avatar (Optional[str]): New avatar path or URL.
    """
    password: Optional[str] = None
    avatar: Optional[str] = None

class ContactBase(BaseModel):
    """
    Base Pydantic schema for contact models.

    Attributes:
        first_name (str): First name of the contact.
        last_name (str): Last name of the contact.
        email (EmailStr): Contact's email address.
        phone (str): Contact's phone number.
        birthday (date): Contact's birthday.
        additional_data (Optional[str]): Additional information about the contact.
        user_id (Optional[int]): ID of the user who owns the contact.
    """
    first_name: str = Field(min_length=2, max_length=50)
    last_name: str = Field(min_length=2, max_length=50)
    email: EmailStr
    phone: str = Field(min_length=10, max_length=20)
    birthday: date
    additional_data: Optional[str] = None
    user_id: Optional[int] = None

class ContactCreate(ContactBase):
    """
    Schema for creating a new contact.
    """
    pass

class ContactUpdate(ContactBase):
    """
    Schema for updating contact information.
    """
    pass

class Contact(ContactBase):
    """
    Schema for reading contact data.

    Attributes:
        id (int): Contact ID.
        user_id (int): ID of the user who owns the contact.
    """
    id: int
    user_id: int

    class Config:
        from_attributes = True

class PasswordResetRequest(BaseModel):
    """
    Schema for requesting a password reset.

    Attributes:
        email (EmailStr): User's email address to send the password reset link.

    Notes:
        The reset link sent to the user's email contains a unique token as a query parameter.
        This token must be used to reset the password within 30 minutes.
    """
    email: EmailStr

class PasswordReset(BaseModel):
    """
    Schema for resetting the password.

    Attributes:
        token (str): Password reset token sent to the user's email (from the link).
        new_password (str): New password to set. Must be at least 8 characters long.

    Notes:
        The `token` is the value from the reset link sent to your email (copy the `token` query parameter).
        The `new_password` must be at least 8 characters long.
    """
    token: str
    new_password: str = Field(min_length=8, max_length=128)
